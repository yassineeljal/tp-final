services:
  portainer:
    # Image de portainer officielle (ce=community edition, alpine=légère) 
    image: portainer/portainer-ce:alpine
    # Nom donné au conteneur 
    container_name: portainer
    # Dans le cas où le conteneur s'arrête/crash, il est automatiquement relancé 
    restart: unless-stopped
    # Réseau docker dans lequel le conteneur va s'exécuter
    networks: 
        - cloud
    # Mappage de port (du port 9000 du conteneur vers le port 9000 de la machine hôte)
    #ports:
    #  - 9000:9000
    # Volumes 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.portainer.rule=Host(`portainer.${MY_DOMAIN}`)'
        - 'traefik.http.routers.portainer.entryPoints=websecure'
        - "traefik.http.services.frontend.loadbalancer.server.port=9000"
        - "traefik.http.routers.frontend.service=frontend"


  nextclouddb:
    # Image mariadb officielle pour entreposer les données de nextcloud
    image: mariadb
    # Nom donné au conteneur 
    container_name: nextcloud-db 
    # Dans le cas où le conteneur s'arrête/crash, il est automatiquement relancé 
    restart: unless-stopped 
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    # Réseau dans lequel le conteneur va s'exécuter (dans le même réseau que nextcloud)
    networks: 
      - cloud
    # Volumes du conteneur: mappe un répertoire du conteneur vers un volume docker pour faire persister les données
    volumes:
      - nextclouddb:/var/lib/mysql
    # Variables d'environnement passés au conteneur lors de son lancement
    environment:
      - PUID=1000
      - PGID=1000
      # Timezone
      - TZ=America/Montreal
      # Indentifiants, mots de passe de la base de données
      - MYSQL_RANDOM_ROOT_PASSWORD=true
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}

  nextcloud:
    # Image nextcloud officielle 
    image: nextcloud
    # Nom donné au conteneur 
    container_name: nextcloud
    # Dans le cas où le conteneur s'arrête/crash, il est automatiquement relancé 
    restart: unless-stopped
    # Réseau dans lequel le conteneur va s'exécuter (dans le même réseau que la BD)
    networks:
      - cloud
    # Attend que la base de données se lance avant de se lancer
    depends_on:
      - nextclouddb 
    # Mappage de port (du port 80 du conteneur vers le port 8081 de la machine hôte)
    # ports:
    #  - 8081:80
    # Volumes du conteneur: mappe un répertoire du conteneur vers un répertoire de la machine hôte
    volumes:
      - ./html:/var/www/html 
      - ./custom_apps:/var/www/html/custom_apps
      - ./config:/var/www/html/config
      - ./data:/var/www/html/data
    # Variables d'environnement passés au conteneur lors de son lancement
    environment:
      - PUID=1000 # The user ids. Most likely both should be 1000. Incorrectly setting these will led to file permission issues
      - PGID=1000 # Set these to whatever your user is.
      # Timezone
      - TZ=America/Montreal
      # Indentifiants, mots de passe de la base de données
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}
    labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.nextcloud.rule=Host(`nextcloud.${MY_DOMAIN}`)'
        - 'traefik.http.routers.nextcloud.entryPoints=websecure'


  jellyfin:
    # Image jellyfin officielle
    image: jellyfin/jellyfin:latest
    # Nom donné au conteneur 
    container_name: jellyfin
    # Dans le cas où le conteneur s'arrête/crash, il est automatiquement relancé 
    restart: unless-stopped
    # Réseau dans lequel le conteneur va s'exécuter
    networks: 
      - cloud
    # Mappage de port (du port 8096 du conteneur vers le port 8096 de la machine hôte)
    # ports:
    #  - 8096:8096
    environment:
      - TZ=America/Montreal
    # Volumes du conteneur: mappe des répertoires du conteneur vers des répertoire de la machine hôte
    volumes:
      - jellyfin_data:/config
      - /mnt/media/Movies:/movies
      - /mnt/media/TV:/tv
    labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.jellyfin.rule=Host(`jellyfin.${MY_DOMAIN}`)'
        - 'traefik.http.routers.jellyfin.entryPoints=websecure'
  proxy:
      image: traefik
      container_name: traefik
      restart: unless-stopped
      networks: 
          - cloud
      command:
        - "--log.level=DEBUG"
        - "--api.insecure=true"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
        - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
        - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
        - "--entrypoints.web.address=:80"
        - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
        - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
        - "--entrypoints.websecure.address=:443"
        - "--entrypoints.websecure.http.tls=true"
        - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
        - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
        - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MY_DOMAIN}"
      volumes:
        - "../data/traefik/letsencrypt:/letsencrypt"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)'
        - 'traefik.http.routers.api.entryPoints=websecure'
        - 'traefik.http.routers.api.service=api@internal'
      ports:
        - "443:443"
        - "80:80"
      environment:
        - "DUCKDNS_TOKEN=${DUCKDNS_TOKEN}"

# Définition des volumes des conteneurs (portainer et bd)
volumes:
    portainer_data:
    nextclouddb:
    jellyfin_data:
# Création du réseau cloud (ou les conteneurs vont être lancés)
networks:
    cloud:
        driver: bridge